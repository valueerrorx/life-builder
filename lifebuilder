#!/bin/bash
#
# Copyright (C) 2017 Thomas Michael Weissel
#
# This software may be modified and distributed under the terms
# of the GPLv3 license.  See the LICENSE file for details.


# make sure script is running with root privileges
if [ "$(whoami)" != "root" ]; then
    echo "Need to be root or run with sudo. Exiting."
    exit 1
fi


#  load basic configuration
lifebuilderVERSION="1.2"
USER=$(logname)
HOME="/home/${USER}/"
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
EXCLUDESFILE="${SCRIPTDIR}/excludes"


#################
# OUTPUT # the output is formatted in a special way in order to be parsed by the python script - do not change !! ยง is the split character
##########################
output() {
    echo "OUTPUT: $1 ยง $2"
}

#################
#  load the system config file (written by main.py)
##########################
source ${SCRIPTDIR}/conf/config.py

if [[( $BASEWORKDIR = "" ) || ( $LIVEUSER = "" ) || ( $LIVEHOSTNAME = "") || ( $CUSTOMISO = "") || ( $LIVECDLABEL = "")]]; then
    output "At least one important setting is missing!" "0"
    exit 0
fi


#################
# prepare workdirectory and logfile
##########################
WORKDIR="$BASEWORKDIR/lifebuilder"
if [ ! -d $WORKDIR ]; then
    mkdir -p $WORKDIR
fi


#################
# prepare excludes for rsync  (rsync doesn't like strings in variables as parameters therefore we work with a file
##########################
rm $EXCLUDESFILE
touch $EXCLUDESFILE
if [ "$EXCLUDES" != "" ]; then
    echo "/rofs" >> $EXCLUDESFILE    # we exclude /rofs (which contains the mounted squashfs filesystem on a live system
    for addvar in $EXCLUDES ; do
        echo $addvar >> $EXCLUDESFILE
    done
fi


#-----------------------------#
output "PART,Part 1" "0"
#-----------------------------#

# #########emergency stop here#############
# output "$WORKDIR/$CUSTOMISO which is in size is ready to be burned or tested in a virtual machine." "10"
# output "ISOLOCATION,$WORKDIR/$CUSTOMISO" "100"
# exit 0
# #########################################



cleanhome (){
    # delete all files that would compromise privacy or produce conflicts
    # .xsession files, ssh keys, kwallet, trash, cache, recent documents, history browser, shell, cookies, configs with passwords
    DUMMYSYSHOME=$1
    if [[( $DUMMYSYSHOME = ""  )]]
    then
        DUMMYSYSHOME="/etc/skel"
    fi
    output "Cleaning up home : ${DUMMYSYSHOME}"
    #google chrome history
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/History" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/History Provider Cache"  > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Login Data"  > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Current Session"  > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Current Tabs"  > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Cookies"  > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Top Sites"  > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Visited Links"  > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Web Data" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Cookies" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Cookies-journal" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Current Session" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Current Tabs " > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Extension Cookies" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Extension Cookies-journal" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/History" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/History-journal" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/History Provider Cache" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Last Session" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Last Tabs" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Login Data" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Login Data-journal" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Top Sites" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Top Sites-journal" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Web Data" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Web Data-journal" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/databases/*" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Shortcuts" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Thumbnails" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Visited Links" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Session Storage" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Cache" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Google Profile Picture.png" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Cache" > /dev/null 2>&1
    rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Media Cache" > /dev/null 2>&1
    #rm -rf "${DUMMYSYSHOME}/.config/google-chrome/Default/Bookmarks" > /dev/null 2>&1
    #firefox ?
    rm -rf ${DUMMYSYSHOME}/.gconf/system/networking > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.local/gvfs-metadata > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.local/share/gvfs-metadata > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.local/share/applications/wine-* > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.local/share/Trash > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.local/share/akonadi > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.local/share/webkit > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.local/share/kwalletd > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.kde/share/apps/klipper > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.kde/share/apps/nepomuk > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.kde/share/apps/RecentDocuments/* > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.local/share/RecentDocuments/* > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.life/EXAM/client.log > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.life/EXAM/ > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.bash_history > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.gitconfig > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.gksu.lock > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.history > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.Xauthority > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.xsession-errors > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.recently-used > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.dbus > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.cache > /dev/null 2>&1
    rm -rf ${DUMMYSYSHOME}/.ssh > /dev/null 2>&1

    for i in ${DUMMYSYSHOME}/.gnome2/keyrings/*; do rm $i > /dev/null 2>&1; done
    find ${DUMMYSYSHOME}/ -name "*socket*" | xargs rm -rf '{}' > /dev/null 2>&1
#     find ${DUMMYSYSHOME}/ -name "*cache*" | xargs rm -rf '{}' > /dev/null 2>&1  #do NOT do this .. there are important files named *cache*
}







copyhome (){
    # this copies the whole HOME folder of the current user to the lifesystem home in order to be used if the username is the same
    # ATTENTION we could just copy the userhome directory to skel and it would be used as default for the live session user
    # but this will slow down the boot process on "persistent" live systems enormously because skel is copied to casper-rw on boot time
    HOMEOLDER=`grep "^$LIVEUSER:" /etc/passwd | awk -F ":" '{print $6}'`
    DUMMYSYSHOME="$WORKDIR/dummysys/home"
    DUMMYSYSHOMEUSERDIR="$WORKDIR/dummysys/home/$LIVEUSER"
    rm -rf ${DUMMYSYSHOME}/*

    output "Copying $HOMEOLDER" "52"

    if [ -d "$HOMEOLDER" ]; then
        cd $HOMEOLDER
        history -w
        history -c
        rm .cache/konsole/* > /dev/null 2>&1
        rm .bash_history > /dev/null 2>&1

        rsync --exclude-from="${EXCLUDESFILE}" --exclude='*.log.*' --exclude='*~' --exclude='*.pid' --exclude='*.bak' --exclude='*.[0-9].gz' --exclude='*.deb' --exclude='kdecache*' -azh --ignore-errors ${HOMEOLDER} ${DUMMYSYSHOME}/.
        cleanhome $DUMMYSYSHOMEUSERDIR
        # change ownership
        chown -R $LIVEUSER:$LIVEUSER ${DUMMYSYSHOME}   > /dev/null 2>&1
    else
        # output 100
        output "ERROR $LIVEUSER or home folder not found - exiting."
        exit 1
    fi
}



cleansystem (){
    # remove unwanted packages and usage history
    # clear kde plasma clipboard and recend applications
    sudo -u $LIVEUSER -H qdbus org.kde.klipper /klipper org.kde.klipper.klipper.clearClipboardHistory
    sudo -u $LIVEUSER -H dbus-send --session --dest=org.kde.ActivityManager --type=method_call /ActivityManager/Resources/Scoring org.kde.ActivityManager.ResourcesScoring.DeleteStatsForResource string:":current" string:":any" string:"applications:*"
    sudo -u $LIVEUSER -H qdbus org.kde.klipper /klipper org.kde.klipper.klipper.clearClipboardContents

    # output5
    output "Cleaning System before building" "17"
    apt-get update  &> /dev/null
    apt-get -y -q autoremove
    apt-get clean

     # output7
    output  "removing cache files" "20"
    sudo rm /var/crash/* > /dev/null 2>&1
    sudo rm -rf /etc/skel/*   > /dev/null 2>&1
    sudo rm /var/tmp/kdecache-root/*  > /dev/null 2>&1
    sudo rm /var/tmp/kdecache-student/* > /dev/null 2>&1

    # remove all old kernel headers and tools
    # output9
    output "purging old kernel, tools and headers"  "22"
    dpkg -l 'linux-*' | sed '/^ii/!d;/'"$(uname -r | sed "s/\(.*\)-\([^0-9]\+\)/\1/")"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' | sed '/dev/d' | xargs apt-get -y purge

    #removing popularity-contest as it causes a problem when installing with ubiquity
    # output10
    output "Making sure popularity contest is not installed"  "25"
    apt-get -y -q remove popularity-contest &> /dev/null

    #removing syslinux-themes as it causes problems
    # output11
    output "Making sure syslinux-themes is not installed"  "28"
    apt-get -y -q purge syslinux-themes* &> /dev/null

    #remove some proprietary assets (important if you want to distribute this iso in public)
    if [[( $REMOVERESTRICTED = "True"  )]]
    then
        output "Removing proprietary packages from the system"  "30"
        sudo apt-get -y -q purge ttf-mscorefonts-installer
        sudo apt-get -y -q purge kubuntu-restricted-extras lubuntu-restricted-extras ubuntu-restricted-extras xubuntu-restricted-extras
        sudo apt-get -y -q purge kubuntu-restricted-addons lubuntu-restricted-addons ubuntu-restricted-addons xubuntu-restricted-addons
        sudo apt-get -y -q purge acroread adobereader-enu acroread-bin:i386
        sudo apt-get -y -q purge flashplugin-installer adobe-flashplugin flashplugin-downloader
        sudo apt-get -y -q autoremove
        sudo apt-get -y -q autoclean

        output "Removing all fonts from the userdirectory"  "34"
        LIVEFOLDER=`grep "^$LIVEUSER:" /etc/passwd | awk -F ":" '{print $6}'`
        if [ -d "$LIVEFOLDER" ]; then
            #don't delete the whole font folder otherwise rescan will just skip and not remove fonts
            rm -rf $LIVEFOLDER/.fonts/*
            fc-cache -rv
        fi
    fi
}



cdfs (){
    #################
    #  clean up & Create the FILESYSTEM tree in $WORKDIR/ISOTMP
    #################
    cleansystem

    #Installing isolinux and calamares (installer)
    # output12
    output "Making sure isolinux, casper and other packages are installed"  "38"
    apt-get -y -q install isolinux syslinux-utils syslinux syslinux-common archdetect-deb &> /dev/null
    apt-get -y -q install casper calamares &> /dev/null
    apt-get -y -q install qemu-kvm overlayroot mbr

   # output "Patching casper..."  "39"
    #fix casper script (change boot order from persistent 1st root 2nd  to root 1st persistent 2nd
    # BUG https://bugs.launchpad.net/ubuntu/+source/casper/+bug/1489855
    #sudo cp -a ${SCRIPTDIR}/conf/casper_patched /usr/share/initramfs-tools/scripts/casper
   # sleep 1

    output "Apply branding and setup for calamares installer..."  "41"
    # you may change the installer behaviour and the branding on your own.. it's quite easy
    sudo cp -a ${SCRIPTDIR}/conf/calamares /etc
    sleep 1

    output "Adding overlayfs to initramfs modules..."  "44"
    # dont forget about this.. otherwise persistent partitions are not going to work
    echo "overlayfs" >> /etc/initramfs-tools/modules
    sleep 0.5

  # output13
    output "Creating $WORKDIR folder tree"  "45"

    rm -rf $WORKDIR/dummysys/
    rm -rf $WORKDIR/ISOTMP/

    mkdir -p $WORKDIR/ISOTMP/{casper,preseed,isolinux,install,.disk}
    mkdir -p $WORKDIR/dummysys/{dev,etc,cdrom,proc,tmp,sys,mnt,media/cdrom,var,run,home}
    mkdir -p $WORKDIR/dummysys/run/sshd

    rsync -ahz /dev/urandom $WORKDIR/dummysys/dev/    # why? what do we need urandom for - isn't it created on boot time ?
    chmod ug+rwx,o+rwt $WORKDIR/dummysys/tmp        # needs to be accessable by everybody

    # output14
    output "Copying /var and /etc to temp folder. This will take a while."  "48"
    rsync --exclude-from="${EXCLUDESFILE}" --exclude='*.log.*' --exclude='*~' --exclude='*.pid' --exclude='*.bak' --exclude='*.[0-9].gz' --exclude='*.deb' --exclude='kdecache*' -ahz /var/. $WORKDIR/dummysys/var/.
    rsync -ahz /etc/. $WORKDIR/dummysys/etc/.

    #Adding packages location to sources
    ARCH=`archdetect | awk -F "/" '{print $1}'`
    DISKINFONAME=`echo $LIVECDLABEL | awk '{print $1}'`


    # output15
   # output "Adding CD-ROM to source list"  "60"
    . /etc/lsb-release
   # sed -i '/cdrom:/d' $WORKDIR/dummysys/etc/apt/sources.list &> /dev/null
   # echo "deb cdrom:[$DISKINFONAME $DISTRIB_RELEASE - Release $ARCH]/ dists/" >> $WORKDIR/dummysys/etc/apt/sources.list



    #Copying grub config
    cp ${SCRIPTDIR}/conf/grub.conf $WORKDIR/dummysys/etc/default/grub
    sed -i "s/LIVECDLABEL/$LIVECDLABEL/g" $WORKDIR/dummysys/etc/default/grub

    # output16
    output "Removing unnecessary files in $WORKDIR/dummysys"  "66"
    #all apt package lists and srcpackage lists are removed. do "apt update" to restore
    rm -rf $WORKDIR/dummysys/var/lib/apt/lists/* -vf &> /dev/null
    rm -rf $WORKDIR/dummysys/var/lib/apt/lists/lock &> /dev/null
    rm -rf $WORKDIR/dummysys/var/cache/apt/archives/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/cache/apt/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/cache/apt-xapian-index/* -r &> /dev/null
    rm -rf $WORKDIR/dummysys/var/lib/ureadahead/pack &> /dev/null
    rm -rf $WORKDIR/dummysys/var/cache/gdm/* &> /dev/null
    rm -f $WORKDIR/dummysys/etc/cups/ssl/server.crt &> /dev/null
    rm -f $WORKDIR/dummysys/etc/cups/ssl/server.key &> /dev/null
    rm -f $WORKDIR/dummysys/etc/ssh/*key* &> /dev/null
    rm -f $WORKDIR/dummysys/var/lib/dbus/machine-id &> /dev/null
    rm -rf $WORKDIR/dummysys/var/tmp/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/backups/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/lock/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/crash/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/lib/ubiquity/* &> /dev/null
    rm -rf $WORKDIR/dummysys/var/log/boot-repair
    rm -rf $WORKDIR/dummysys/var/log/boot-info

    #create empty logfiles
    find $WORKDIR/dummysys/var/log -regex '.*?[0-9].*?' -exec rm -rf {} \;
    find $WORKDIR/dummysys/var/log -type f | while read file
    do
            cat /dev/null | tee $file
    done

    #Setting  auto login for sddm (makes user $LIVEUSER autologin )
    cp -a ${SCRIPTDIR}/conf/sddm.conf $WORKDIR/dummysys/etc/
    sed -i "s/LIVEUSER/$LIVEUSER/g" $WORKDIR/dummysys/etc/sddm.conf
    chmod +x $WORKDIR/dummysys/etc/sddm.conf
    chmod 755 $WORKDIR/dummysys/etc/sddm.conf

    ##########################
    #  Copy the whole home folder to dummysys in order to preserve all configurations
    #  and make sure the live system does not create a new user - nor ubiquity installer
    ##########################
    copyhome

    # remove exec rights from add user scripts so no new live system user is added
    output "Making sure adduser and autologin functions of casper are deactivated"  "74"
    chmod 644 /usr/share/initramfs-tools/scripts/casper-bottom/*adduser /usr/share/initramfs-tools/scripts/casper-bottom/*autologin


    #################
    #  add other stuff like preseed, memtest, efi
    ##########################
    #copy some of the necessary stuff for the livecd
    cp ${SCRIPTDIR}/preseed/* $WORKDIR/ISOTMP/preseed/


    #EFI BOOT
    # output20
    output "Copying EFI Boot for the live system" "80"
    cp -a ${SCRIPTDIR}/usbcreator/boot/ $WORKDIR/ISOTMP/
    cp -a ${SCRIPTDIR}/EFI/ $WORKDIR/ISOTMP/



    #################
    #  Downloading packages for offline install (needed by the systeminstaller in order to install the system to a disk) or does it ??
    ##########################

    # output21
    #output "Downloading packages for CD" "82"

    # Check Architecture
    ARCH=`archdetect | awk -F "/" '{print $1}'`
    mkdir -p $WORKDIR/ISOTMP/pool
    cd $WORKDIR/ISOTMP/pool

    #the list below is copied from the kubuntu 1804 original install image
   # apt-get download b43-fwcutter binutils binutils-common binutils-x86-64-linux-gnu libbinutils build-essential bcmwl-kernel-source dkms dpkg-dev fakeroot libfakeroot g++-7 g++ gcc gcc-7 gcc-5 grub-pc grub-pc-bin grub-gfxpayload-lists grub-efi grub-efi-amd64 grub-efi-amd64-bin grub-efi-amd64-signed libasan4  libatomic1 libc-dev-bin libc6-dev libc6-i386 libcilkrts5 libfakeroot libgcc-7-dev libstdc++-7-dev libitm1 liblsan0 libmpx2 libquadmath0 libtsan0 libubsan0 linux-libc-dev lupin-support libalgorithm-diff-perl libalgorithm-diff-xs-perl libalgorithm-merge-perl make manpages-dev mokutil mouseemu oem-config oem-config-kde user-setup patch setserial shim shim-signed

    mkdir -p $WORKDIR/ISOTMP/dists
    cd $WORKDIR/ISOTMP/
    #dpkg-scanpackages -m pool /dev/null | gzip -9c > dists/Packages.gz
    apt-ftparchive -c ${SCRIPTDIR}/conf/release.conf release $WORKDIR/ISOTMP/dists > $WORKDIR/ISOTMP/dists/Release



    #################
    #   create isolinux folder and files
    ##########################

    # output22
    output "Creating isolinux setup for the live system" "88"
    find /usr -name 'isolinux.bin' -exec cp {} $WORKDIR/ISOTMP/isolinux/ \;
    #find fix for vesamenu.32 provided by Krasimir S. Stefanov <lokiisyourmaster@gmail.com>
    VESAMENU=$(find /usr -print0 | grep -FzZ "bios/vesamenu.c32" | tr -d '\0')
    cp $VESAMENU $WORKDIR/ISOTMP/isolinux/
    LDLINUX=$(find /usr -print0 | grep -FzZ "bios/ldlinux.c32" | tr -d '\0')
    cp $LDLINUX $WORKDIR/ISOTMP/isolinux/
    LIBUTIL=$(find /usr -print0 | grep -FzZ "bios/libutil.c32" | tr -d '\0')
    cp $LIBUTIL $WORKDIR/ISOTMP/isolinux/
    LIBCOM=$(find /usr -print0 | grep -FzZ "bios/libcom32.c32" | tr -d '\0')
    cp $LIBCOM $WORKDIR/ISOTMP/isolinux/
    MENU=$(find /usr -print0 | grep -FzZ "bios/menu.c32" | tr -d '\0')
    cp $MENU $WORKDIR/ISOTMP/isolinux/


    # setup isolinux for the livecd   (iso linux is used for liveCD .. syslinux is used for live USB
    VERSION=`lsb_release -r | awk '{print $2}' | awk -F "." '{print $1}'`
    sed -e 's/__LIVECDLABEL__/'"$LIVECDLABEL"'/g' ${SCRIPTDIR}/usbcreator/isolinux/syslinux.cfg > $WORKDIR/ISOTMP/isolinux/isolinux.cfg
    #usb creator would rename the folder to syslinux later
    sed -e 's/__LIVECDLABEL__/'"$LIVECDLABEL"'/g' ${SCRIPTDIR}/usbcreator/isolinux/syslinux.cfg > $WORKDIR/ISOTMP/isolinux/syslinux.cfg
    cp ${SCRIPTDIR}/usbcreator/isolinux/splash.png $WORKDIR/ISOTMP/isolinux/splash.png


    #################
    #  add more stuff like .diskdefines .manifest etc.
    ##########################

    # output23
    output "Creating README.diskdefines"  "93"
    ARCH=`archdetect | awk -F "/" '{print $1}'`

    cat > $WORKDIR/ISOTMP/README.diskdefines <<FOO
#define DISKNAME  $LIVECDLABEL
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  $ARCH
#define ARCH$ARCH  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
FOO
    cp $WORKDIR/ISOTMP/README.diskdefines $WORKDIR/ISOTMP/casper/README.diskdefines

    sleep 1

    # Make the filesystem.manifest and filesystem.manifest-desktop
    # output24
    output "Creating filesystem.manifest and filesystem.manifest-desktop" "91"
    dpkg-query -W --showformat='${Package} ${Version}\n' > $WORKDIR/ISOTMP/casper/filesystem.manifest

    cp $WORKDIR/ISOTMP/casper/filesystem.manifest $WORKDIR/ISOTMP/casper/filesystem.manifest-desktop
    # Suggested by lkjoel from Ubuntu Forums - Joel Leclerc to remove the frontend so the Install menu item is not on the installed system
    sed -i '/ubiquity-frontend/d' $WORKDIR/ISOTMP/casper/filesystem.manifest-desktop

    sleep 1

    # Prepare casper.conf
    # output25
    output "Creating the casper.conf file." "94"

    cat > /etc/casper.conf <<FOO
# This file should go in /etc/casper.conf
# Supported variables are:
# USERNAME, USERFULLNAME, HOST, BUILD_SYSTEM

export USERNAME="$LIVEUSER"
export USERFULLNAME="Live session user"
export HOST="$LIVEHOSTNAME"
export BUILD_SYSTEM="Ubuntu"
export FLAVOUR="$LIVEHOSTNAME"
FOO

    cp /etc/casper.conf $WORKDIR/dummysys/etc/



    #################
    #  create a new initial ramdisk including the casper scripts and kernel
    ##########################

    # output26
    output "Creating a new initial ramdisk for the live system" "96"
    mkinitramfs -o /boot/initrd.img-`uname -r` `uname -r`

    # output27
    output "Copying your kernel and initrd for the livecd" "100"
    cp /boot/vmlinuz-`uname -r` $WORKDIR/ISOTMP/casper/vmlinuz
    cp /boot/initrd.img-`uname -r` $WORKDIR/ISOTMP/casper/initrd
    #check if that went well .. otherwise you can stop immediately
    if [ ! -f $WORKDIR/ISOTMP/casper/vmlinuz ]; then
        # output100
        output "ERROR Missing valid kernel. Exiting"
        exit 1
    fi
    if [ ! -f $WORKDIR/ISOTMP/casper/initrd ]; then
        # output100
        output "ERROR Missing valid initial ramdisk. Exiting"
        exit 1
    fi


    #-----------------------------#
    output "PART,Part 2" "0"
    #-----------------------------#


    ##############
    #   Make filesystem.squashfs
    ###############################

    if [ -f $WORKDIR/ISOTMP/casper/filesystem.squashfs ]; then
        rm -f $WORKDIR/ISOTMP/casper/filesystem.squashfs &> /dev/null
    fi
    # output1
    output "Creating filesystem.squashfs   ... this will take a while so be patient" "0"
    sleep 1

    ##############
    #   Create a list of folders to be included in the squashfs (those we didn't copy before because we can add them unaltered)
    ###############################

    REALFOLDERS=""
    for d in `ls -d $WORKDIR/dummysys/*`; do
        REALFOLDERS="$REALFOLDERS $d"
    done

    for d in `ls / | grep -v etc | grep -v run | grep -v tmp | grep -v sys | grep -v var | grep -v dev | grep -v media | grep -v cdrom | grep -v mnt | grep -v lost+found | grep -v proc | grep -v home`; do
        REALFOLDERS="$REALFOLDERS /$d"
    done

    ##############
    #   Calculate the number of files to include (for the python script progress bar)
    ###############################

    # we count all inodes in the REALFOLDERS in order to predict how many lines mksquashfs will produce (and we add 20000 lines because of its additional output
    FILES=25000
    for k in $REALFOLDERS; do
        LIST=`ls -d $k`
        NEWFILES=$(for i in $LIST; do sudo find $i -printf "%i\n" | sort -u | wc -l ; done)
        FILES=$(( $FILES + $NEWFILES ))
    done

    #we print a triggerword and the number of files to stdout in order for the pythonscript to grab it
    # output2
    output "SQUASHSTART,$FILES" "0"
    # the progress of mksquashfs is monitored by the python script.. every line it produces advances the progressbar
    sleep 2

    ##############
    #  Make the fracking squashfs NOW     # squashfsopts uses -comp xz for highest compression - excluding bootfiles from compression
    ###############################
    mksquashfs $REALFOLDERS $WORKDIR/ISOTMP/casper/filesystem.squashfs -no-progress -info $SQUASHFSOPTS -e /boot/efi/EFI /boot/grub $BASEWORKDIR $EXCLUDES

    # we send the finished process trigger word
    # output3
    output "SQUASHEND" "100"

    sleep 1


    #-----------------------------#
    output "PART,Part 3" "0"
    #-----------------------------#

    ##############
    # check and calculate filesize
    ###############################


    #checking the size of the compressed filesystem to ensure it meets the iso9660 spec for a single file"
    SQUASHFSSIZE=`ls -s $WORKDIR/ISOTMP/casper/filesystem.squashfs | awk -F " " '{print $1}'`
    if [ "$SQUASHFSSIZE" -gt "3999999" ]; then
        # output100
        output "ERROR The compressed filesystem is larger than genisoimage allows for a single file. You must try to reduce the amount of data you are backing up and try again."
        exit 1
    fi

    #add filesystem size
    UNPACKEDSIZE=$(($SQUASHFSSIZE*3*1024))
    echo $UNPACKEDSIZE > $WORKDIR/ISOTMP/casper/filesystem.size
    # compressed filesize times 3 (*1024 in bit) is almost accurate..  calculating it precisely takes long and somehow suddenly stops the program .. didn't do it yesterday..  wtf

#     # output1
#     output "Calculating the installed filesystem size for the installer" "0"
#     unsquashfs -lls $WORKDIR/ISOTMP/casper/filesystem.squashfs | grep -v " inodes " | grep -v "unsquashfs:" | awk '{print $3}' | grep -v "," > /tmp/size.tmp
#     for i in `cat /tmp/size.tmp`; do a=$(($a+$i)); done
#     echo $a > $WORKDIR/ISOTMP/casper/filesystem.size
}
















iso (){

    CREATEISO="`which mkisofs`"
    if [ "$CREATEISO" = "" ]; then
        CREATEISO="`which genisoimage`"
    fi


    ############################
    # Make ISO compatible with Ubuntu Startup Disk Creator
    ############################

    # output2
    output "Making disk compatible with Ubuntu Startup Disk Creator." "12"

    . /etc/lsb-release
    touch $WORKDIR/ISOTMP/ubuntu
    touch $WORKDIR/ISOTMP/.disk/base_installable
    echo "full_cd/single" > $WORKDIR/ISOTMP/.disk/cd_type
    ARCH=`archdetect | awk -F "/" '{print $1}'`

    DISKINFONAME=`echo $LIVECDLABEL | awk '{print $1}'`
    echo $DISKINFONAME $DISTRIB_RELEASE - Release $ARCH > $WORKDIR/ISOTMP/.disk/info
    echo $LIVECDURL > $WORKDIR/ISOTMP/.disk/release_notes_url

    # Make md5sum.txt for the files on the livecd - this is used during the checking function of the livecd
    # output3
    output "Creating md5sum.txt for the livecd/dvd" "25"
    cd $WORKDIR/ISOTMP && find . -type f -print0 | xargs -0 md5sum > md5sum.txt

    #isolinux mode
    # remove files that change and cause problems with checking the disk
    sed -e '/isolinux/d' md5sum.txt > md5sum.txt.new
    sed -e '/md5sum/d' md5sum.txt.new > md5sum.txt
    rm -f md5sum.txt.new &> /dev/null

    sleep 1


    ############################
    # Make the ISO file
    ############################

    if [ -f $WORKDIR/$CUSTOMISO ]; then
        #there already is an ISO file with that name.. rename it
        mv -f $WORKDIR/$CUSTOMISO $WORKDIR/$CUSTOMISO-old

    fi

    # output4
    output "Creating $CUSTOMISO in $WORKDIR - this can take a while..." "38"
    $CREATEISO -iso-level 3 -quiet -r -V "$LIVECDLABEL" -cache-inodes -J -l -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e boot/grub/efi.img -no-emul-boot -o $WORKDIR/$CUSTOMISO "$WORKDIR/ISOTMP"
    if [ ! -f $WORKDIR/$CUSTOMISO ]; then
        # output100
        output "ERROR The iso was not created. There was a problem. Exiting"
        exit 1
    fi

    # Make the iso hybrid so it can be simply dd copied to a usb flash drive.
    # output5
    output "Making $CUSTOMISO a hybrid iso" "60"
    isohybrid --uefi $WORKDIR/$CUSTOMISO

    # create the md5 sum file
    # output6
    output "Creating $CUSTOMISO.md5 in $WORKDIR" "72"

    cd $WORKDIR
    md5sum $CUSTOMISO > $CUSTOMISO.md5

    sleep 1
    # output7
    output "Creating $CUSTOMISO.sha256 in $WORKDIR" "84"

    cd $WORKDIR
    sha256sum $CUSTOMISO > $CUSTOMISO.sha256
    sleep 1

    ISOSIZE="`ls -hs $WORKDIR/$CUSTOMISO | awk '{print $1}'`"

    # output8
    output "$WORKDIR/$CUSTOMISO which is $ISOSIZE in size is ready to be tested." "100"

}



###########
# trigger creation of squashfs and iso file
###########

cdfs $@

output "Creating ISO." "5"

iso $@

output "ISOLOCATION,$WORKDIR/$CUSTOMISO" "100"      #the trigger word ISOLOCATION will be used in the pythonscript to display and store the iso location


## test this image with
#   kvm -cdrom life-dist1.iso -boot d -m 1024
#####




exit 0
